
GccApplication13.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00800060  000001fa  0000026e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002a6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b00  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000064a  00000000  00000000  00000e64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000444  00000000  00000000  000014ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  000018f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b4  00000000  00000000  00001998  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000044a  00000000  00000000  00001d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00002196  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ef       	ldi	r30, 0xFA	; 250
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 39       	cpi	r26, 0x98	; 152
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 cc 00 	call	0x198	; 0x198 <main>
  7a:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_Cmd>:
}

/*LCD command write function*/
void LCD_Cmd(unsigned char cmd){
	/*Sending the first nibble of data (Higher 4 bits)*/
	LCD_Port = (LCD_Port & 0x0F) | (cmd & 0xF0);/* Sending upper nibble */
  82:	92 b3       	in	r25, 0x12	; 18
  84:	9f 70       	andi	r25, 0x0F	; 15
  86:	28 2f       	mov	r18, r24
  88:	20 7f       	andi	r18, 0xF0	; 240
  8a:	92 2b       	or	r25, r18
  8c:	92 bb       	out	0x12, r25	; 18
	LCD_Port &= ~ (1<<RS); /* RS=0, command reg. */
  8e:	92 b3       	in	r25, 0x12	; 18
  90:	9e 7f       	andi	r25, 0xFE	; 254
  92:	92 bb       	out	0x12, r25	; 18
	LCD_Port |= (1<<EN); /* Enable pulse ON */
  94:	92 b3       	in	r25, 0x12	; 18
  96:	92 60       	ori	r25, 0x02	; 2
  98:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN); /* Enable pulse OFF */
  9c:	92 b3       	in	r25, 0x12	; 18
  9e:	9d 7f       	andi	r25, 0xFD	; 253
  a0:	92 bb       	out	0x12, r25	; 18
  a2:	32 e4       	ldi	r19, 0x42	; 66
  a4:	3a 95       	dec	r19
  a6:	f1 f7       	brne	.-4      	; 0xa4 <LCD_Cmd+0x22>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <LCD_Cmd+0x28>
	_delay_us(200);
	/*Sending the second nibble of data (Lower 4 bits)*/
	LCD_Port = (LCD_Port & 0x0F) | (cmd << 4);/* Sending lower nibble */
  aa:	22 b3       	in	r18, 0x12	; 18
  ac:	30 e1       	ldi	r19, 0x10	; 16
  ae:	83 9f       	mul	r24, r19
  b0:	c0 01       	movw	r24, r0
  b2:	11 24       	eor	r1, r1
  b4:	92 2f       	mov	r25, r18
  b6:	9f 70       	andi	r25, 0x0F	; 15
  b8:	89 2b       	or	r24, r25
  ba:	82 bb       	out	0x12, r24	; 18
	LCD_Port |= (1<<EN); /* Enable pulse ON */
  bc:	82 b3       	in	r24, 0x12	; 18
  be:	82 60       	ori	r24, 0x02	; 2
  c0:	82 bb       	out	0x12, r24	; 18
  c2:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN); /* Enable pulse OFF */
  c4:	82 b3       	in	r24, 0x12	; 18
  c6:	8d 7f       	andi	r24, 0xFD	; 253
  c8:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	83 ef       	ldi	r24, 0xF3	; 243
  cc:	91 e0       	ldi	r25, 0x01	; 1
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <LCD_Cmd+0x4c>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <LCD_Cmd+0x52>
  d4:	00 00       	nop
  d6:	08 95       	ret

000000d8 <LCD_Char>:
}

/*LCD data write function */
void LCD_Char (unsigned char char_data){
	/*Sending the first nibble of data (Higher 4 bits)*/
	LCD_Port = (LCD_Port & 0x0F) | (char_data & 0xF0);/* Sending upper nibble */
  d8:	92 b3       	in	r25, 0x12	; 18
  da:	9f 70       	andi	r25, 0x0F	; 15
  dc:	28 2f       	mov	r18, r24
  de:	20 7f       	andi	r18, 0xF0	; 240
  e0:	92 2b       	or	r25, r18
  e2:	92 bb       	out	0x12, r25	; 18
	LCD_Port |= (1<<RS); /* RS=1, data reg. */
  e4:	92 b3       	in	r25, 0x12	; 18
  e6:	91 60       	ori	r25, 0x01	; 1
  e8:	92 bb       	out	0x12, r25	; 18
	LCD_Port |= (1<<EN); /* Enable pulse ON */
  ea:	92 b3       	in	r25, 0x12	; 18
  ec:	92 60       	ori	r25, 0x02	; 2
  ee:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN); /* Enable pulse OFF */
  f2:	92 b3       	in	r25, 0x12	; 18
  f4:	9d 7f       	andi	r25, 0xFD	; 253
  f6:	92 bb       	out	0x12, r25	; 18
  f8:	32 e4       	ldi	r19, 0x42	; 66
  fa:	3a 95       	dec	r19
  fc:	f1 f7       	brne	.-4      	; 0xfa <LCD_Char+0x22>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <LCD_Char+0x28>
	_delay_us(200);
	/*Sending the second nibble of data (Lower 4 bits)*/
	LCD_Port = (LCD_Port & 0x0F) | (char_data << 4); /* Sending lower nibble */
 100:	22 b3       	in	r18, 0x12	; 18
 102:	30 e1       	ldi	r19, 0x10	; 16
 104:	83 9f       	mul	r24, r19
 106:	c0 01       	movw	r24, r0
 108:	11 24       	eor	r1, r1
 10a:	92 2f       	mov	r25, r18
 10c:	9f 70       	andi	r25, 0x0F	; 15
 10e:	89 2b       	or	r24, r25
 110:	82 bb       	out	0x12, r24	; 18
	LCD_Port |= (1<<EN); /* Enable pulse ON */
 112:	82 b3       	in	r24, 0x12	; 18
 114:	82 60       	ori	r24, 0x02	; 2
 116:	82 bb       	out	0x12, r24	; 18
 118:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN); /* Enable pulse OFF */
 11a:	82 b3       	in	r24, 0x12	; 18
 11c:	8d 7f       	andi	r24, 0xFD	; 253
 11e:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 120:	83 ef       	ldi	r24, 0xF3	; 243
 122:	91 e0       	ldi	r25, 0x01	; 1
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <LCD_Char+0x4c>
 128:	00 c0       	rjmp	.+0      	; 0x12a <LCD_Char+0x52>
 12a:	00 00       	nop
 12c:	08 95       	ret

0000012e <LCD_Init>:
	_delay_ms(2);
}

void LCD_Init (void){
	LCD_Dir = 0xFF; /* Make LCD command port direction as output pins*/
 12e:	8f ef       	ldi	r24, 0xFF	; 255
 130:	81 bb       	out	0x11, r24	; 17
 132:	87 e8       	ldi	r24, 0x87	; 135
 134:	93 e1       	ldi	r25, 0x13	; 19
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <LCD_Init+0x8>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <LCD_Init+0xe>
 13c:	00 00       	nop
	_delay_ms(20); /* LCD Power ON delay always > 15ms */
	LCD_Cmd(0x02); /* Return display to its home position */
 13e:	82 e0       	ldi	r24, 0x02	; 2
 140:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Cmd>
	LCD_Cmd(0x28); /* 2 line 4bit mode */
 144:	88 e2       	ldi	r24, 0x28	; 40
 146:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Cmd>
	LCD_Cmd(0x0C); /* Display ON Cursor OFF */
 14a:	8c e0       	ldi	r24, 0x0C	; 12
 14c:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Cmd>
	LCD_Cmd(0x06); /* Auto Increment cursor */
 150:	86 e0       	ldi	r24, 0x06	; 6
 152:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Cmd>
	LCD_Cmd(0x01); /* Clear display */
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Cmd>
 15c:	08 95       	ret

0000015e <LCD_Clear>:
}

/*Clear LCD Function*/
void LCD_Clear(void){
	LCD_Cmd(0x01); /* clear display */
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Cmd>
	LCD_Cmd(0x02); /* Return display to its home position */
 164:	82 e0       	ldi	r24, 0x02	; 2
 166:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Cmd>
 16a:	08 95       	ret

0000016c <LCD_String>:
}

/*Send string to LCD function */
void LCD_String (char *str){
 16c:	0f 93       	push	r16
 16e:	1f 93       	push	r17
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	8c 01       	movw	r16, r24
	int i;
	/* Send each char of string till the NULL */
	for(i=0;str[i]!=0;i++){
 176:	c0 e0       	ldi	r28, 0x00	; 0
 178:	d0 e0       	ldi	r29, 0x00	; 0
 17a:	03 c0       	rjmp	.+6      	; 0x182 <LCD_String+0x16>
		LCD_Char(str[i]);
 17c:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_Char>

/*Send string to LCD function */
void LCD_String (char *str){
	int i;
	/* Send each char of string till the NULL */
	for(i=0;str[i]!=0;i++){
 180:	21 96       	adiw	r28, 0x01	; 1
 182:	f8 01       	movw	r30, r16
 184:	ec 0f       	add	r30, r28
 186:	fd 1f       	adc	r31, r29
 188:	80 81       	ld	r24, Z
 18a:	81 11       	cpse	r24, r1
 18c:	f7 cf       	rjmp	.-18     	; 0x17c <LCD_String+0x10>
		LCD_Char(str[i]);
	}
}
 18e:	df 91       	pop	r29
 190:	cf 91       	pop	r28
 192:	1f 91       	pop	r17
 194:	0f 91       	pop	r16
 196:	08 95       	ret

00000198 <main>:
void LCD_String_xy(char row, char pos, char *str);

/*Our main program*/
int main(void)
{
	LCD_Init(); /* Initialize LCD */
 198:	0e 94 97 00 	call	0x12e	; 0x12e <LCD_Init>
	
	while (1)
	{
		LCD_String("MSP II:EMT 3202"); /* Write a string on 1st line of LCD*/
 19c:	80 e6       	ldi	r24, 0x60	; 96
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0e 94 b6 00 	call	0x16c	; 0x16c <LCD_String>
		LCD_Cmd(0xC0); /* Go to 2nd line*/
 1a4:	80 ec       	ldi	r24, 0xC0	; 192
 1a6:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Cmd>
		LCD_String("Hello World"); /* Write string on 2nd line*/
 1aa:	80 e7       	ldi	r24, 0x70	; 112
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0e 94 b6 00 	call	0x16c	; 0x16c <LCD_String>
 1b2:	2f e3       	ldi	r18, 0x3F	; 63
 1b4:	82 e4       	ldi	r24, 0x42	; 66
 1b6:	9f e0       	ldi	r25, 0x0F	; 15
 1b8:	21 50       	subi	r18, 0x01	; 1
 1ba:	80 40       	sbci	r24, 0x00	; 0
 1bc:	90 40       	sbci	r25, 0x00	; 0
 1be:	e1 f7       	brne	.-8      	; 0x1b8 <main+0x20>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <main+0x2a>
 1c2:	00 00       	nop
		_delay_ms(5000);
		LCD_Clear();
 1c4:	0e 94 af 00 	call	0x15e	; 0x15e <LCD_Clear>
		LCD_String("Custom chars"); /* Write a string on 1st line of LCD*/
 1c8:	8c e7       	ldi	r24, 0x7C	; 124
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	0e 94 b6 00 	call	0x16c	; 0x16c <LCD_String>
		LCD_Cmd(0xC0); /* Go to 2nd line*/
 1d0:	80 ec       	ldi	r24, 0xC0	; 192
 1d2:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Cmd>
		LCD_String("TILL NEXT TIME"); /* Write string on 2nd line*/	
 1d6:	89 e8       	ldi	r24, 0x89	; 137
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 b6 00 	call	0x16c	; 0x16c <LCD_String>
 1de:	2f e3       	ldi	r18, 0x3F	; 63
 1e0:	82 e4       	ldi	r24, 0x42	; 66
 1e2:	9f e0       	ldi	r25, 0x0F	; 15
 1e4:	21 50       	subi	r18, 0x01	; 1
 1e6:	80 40       	sbci	r24, 0x00	; 0
 1e8:	90 40       	sbci	r25, 0x00	; 0
 1ea:	e1 f7       	brne	.-8      	; 0x1e4 <main+0x4c>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <main+0x56>
 1ee:	00 00       	nop
		_delay_ms(5000);	
		LCD_Clear();
 1f0:	0e 94 af 00 	call	0x15e	; 0x15e <LCD_Clear>
 1f4:	d3 cf       	rjmp	.-90     	; 0x19c <main+0x4>

000001f6 <_exit>:
 1f6:	f8 94       	cli

000001f8 <__stop_program>:
 1f8:	ff cf       	rjmp	.-2      	; 0x1f8 <__stop_program>
