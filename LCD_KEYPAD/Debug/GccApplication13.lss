
GccApplication13.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  000001e2  00000256  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000029c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ac8  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000066c  00000000  00000000  00000df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000042e  00000000  00000000  00001464  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  00001894  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e9  00000000  00000000  0000195c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000045d  00000000  00000000  00001d45  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000021a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ee       	ldi	r30, 0xE2	; 226
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 df 00 	call	0x1be	; 0x1be <main>
  7a:	0c 94 ef 00 	jmp	0x1de	; 0x1de <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_Cmd>:
}

/*Clear LCD Function*/
void LCD_Clear(void){
	LCD_Cmd(0x01); /* clear display */
	LCD_Cmd(0x02); /* Return display to its home position */
  82:	92 b3       	in	r25, 0x12	; 18
  84:	9f 70       	andi	r25, 0x0F	; 15
  86:	28 2f       	mov	r18, r24
  88:	20 7f       	andi	r18, 0xF0	; 240
  8a:	92 2b       	or	r25, r18
  8c:	92 bb       	out	0x12, r25	; 18
  8e:	92 b3       	in	r25, 0x12	; 18
  90:	9e 7f       	andi	r25, 0xFE	; 254
  92:	92 bb       	out	0x12, r25	; 18
  94:	92 b3       	in	r25, 0x12	; 18
  96:	92 60       	ori	r25, 0x02	; 2
  98:	92 bb       	out	0x12, r25	; 18
  9a:	00 00       	nop
  9c:	92 b3       	in	r25, 0x12	; 18
  9e:	9d 7f       	andi	r25, 0xFD	; 253
  a0:	92 bb       	out	0x12, r25	; 18
  a2:	32 e4       	ldi	r19, 0x42	; 66
  a4:	3a 95       	dec	r19
  a6:	f1 f7       	brne	.-4      	; 0xa4 <LCD_Cmd+0x22>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <LCD_Cmd+0x28>
  aa:	22 b3       	in	r18, 0x12	; 18
  ac:	30 e1       	ldi	r19, 0x10	; 16
  ae:	83 9f       	mul	r24, r19
  b0:	c0 01       	movw	r24, r0
  b2:	11 24       	eor	r1, r1
  b4:	92 2f       	mov	r25, r18
  b6:	9f 70       	andi	r25, 0x0F	; 15
  b8:	89 2b       	or	r24, r25
  ba:	82 bb       	out	0x12, r24	; 18
  bc:	82 b3       	in	r24, 0x12	; 18
  be:	82 60       	ori	r24, 0x02	; 2
  c0:	82 bb       	out	0x12, r24	; 18
  c2:	00 00       	nop
  c4:	82 b3       	in	r24, 0x12	; 18
  c6:	8d 7f       	andi	r24, 0xFD	; 253
  c8:	82 bb       	out	0x12, r24	; 18
  ca:	83 ef       	ldi	r24, 0xF3	; 243
  cc:	91 e0       	ldi	r25, 0x01	; 1
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <LCD_Cmd+0x4c>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <LCD_Cmd+0x52>
  d4:	00 00       	nop
  d6:	08 95       	ret

000000d8 <LCD_Data>:
  d8:	92 b3       	in	r25, 0x12	; 18
  da:	9f 70       	andi	r25, 0x0F	; 15
  dc:	28 2f       	mov	r18, r24
  de:	20 7f       	andi	r18, 0xF0	; 240
  e0:	92 2b       	or	r25, r18
  e2:	92 bb       	out	0x12, r25	; 18
  e4:	92 b3       	in	r25, 0x12	; 18
  e6:	91 60       	ori	r25, 0x01	; 1
  e8:	92 bb       	out	0x12, r25	; 18
  ea:	92 b3       	in	r25, 0x12	; 18
  ec:	92 60       	ori	r25, 0x02	; 2
  ee:	92 bb       	out	0x12, r25	; 18
  f0:	00 00       	nop
  f2:	92 b3       	in	r25, 0x12	; 18
  f4:	9d 7f       	andi	r25, 0xFD	; 253
  f6:	92 bb       	out	0x12, r25	; 18
  f8:	32 e4       	ldi	r19, 0x42	; 66
  fa:	3a 95       	dec	r19
  fc:	f1 f7       	brne	.-4      	; 0xfa <LCD_Data+0x22>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <LCD_Data+0x28>
 100:	22 b3       	in	r18, 0x12	; 18
 102:	30 e1       	ldi	r19, 0x10	; 16
 104:	83 9f       	mul	r24, r19
 106:	c0 01       	movw	r24, r0
 108:	11 24       	eor	r1, r1
 10a:	92 2f       	mov	r25, r18
 10c:	9f 70       	andi	r25, 0x0F	; 15
 10e:	89 2b       	or	r24, r25
 110:	82 bb       	out	0x12, r24	; 18
 112:	82 b3       	in	r24, 0x12	; 18
 114:	82 60       	ori	r24, 0x02	; 2
 116:	82 bb       	out	0x12, r24	; 18
 118:	00 00       	nop
 11a:	82 b3       	in	r24, 0x12	; 18
 11c:	8d 7f       	andi	r24, 0xFD	; 253
 11e:	82 bb       	out	0x12, r24	; 18
 120:	83 ef       	ldi	r24, 0xF3	; 243
 122:	91 e0       	ldi	r25, 0x01	; 1
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <LCD_Data+0x4c>
 128:	00 c0       	rjmp	.+0      	; 0x12a <LCD_Data+0x52>
 12a:	00 00       	nop
 12c:	08 95       	ret

0000012e <LCD_Init>:
 12e:	8f ef       	ldi	r24, 0xFF	; 255
 130:	81 bb       	out	0x11, r24	; 17
 132:	87 e8       	ldi	r24, 0x87	; 135
 134:	93 e1       	ldi	r25, 0x13	; 19
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <LCD_Init+0x8>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <LCD_Init+0xe>
 13c:	00 00       	nop
 13e:	82 e0       	ldi	r24, 0x02	; 2
 140:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Cmd>
 144:	88 e2       	ldi	r24, 0x28	; 40
 146:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Cmd>
 14a:	8c e0       	ldi	r24, 0x0C	; 12
 14c:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Cmd>
 150:	86 e0       	ldi	r24, 0x06	; 6
 152:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Cmd>
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Cmd>
 15c:	08 95       	ret

0000015e <LCD_String>:
}

/*Send string to LCD function */
void LCD_String (char *str){
 15e:	0f 93       	push	r16
 160:	1f 93       	push	r17
 162:	cf 93       	push	r28
 164:	df 93       	push	r29
 166:	8c 01       	movw	r16, r24
	int i;
	/* Send each char of string till the NULL */
	for(i=0;str[i]!=0;i++){
 168:	c0 e0       	ldi	r28, 0x00	; 0
 16a:	d0 e0       	ldi	r29, 0x00	; 0
 16c:	03 c0       	rjmp	.+6      	; 0x174 <LCD_String+0x16>
		LCD_Data(str[i]);
 16e:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_Data>

/*Send string to LCD function */
void LCD_String (char *str){
	int i;
	/* Send each char of string till the NULL */
	for(i=0;str[i]!=0;i++){
 172:	21 96       	adiw	r28, 0x01	; 1
 174:	f8 01       	movw	r30, r16
 176:	ec 0f       	add	r30, r28
 178:	fd 1f       	adc	r31, r29
 17a:	80 81       	ld	r24, Z
 17c:	81 11       	cpse	r24, r1
 17e:	f7 cf       	rjmp	.-18     	; 0x16e <LCD_String+0x10>
		LCD_Data(str[i]);
	}
}
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	1f 91       	pop	r17
 186:	0f 91       	pop	r16
 188:	08 95       	ret

0000018a <Custom_characters>:

// Create custom characters
void Custom_characters(unsigned char custom_char[]){
 18a:	0f 93       	push	r16
 18c:	1f 93       	push	r17
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	8c 01       	movw	r16, r24
	// CGRAM address = (character code x 8) + CGRAM base address
	unsigned char cgram_address = (1 * 8) + 0x40;

	LCD_Cmd(cgram_address); // Set CGRAM address
 194:	88 e4       	ldi	r24, 0x48	; 72
 196:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Cmd>
	for(int i=0; i<8; i++) {
 19a:	c0 e0       	ldi	r28, 0x00	; 0
 19c:	d0 e0       	ldi	r29, 0x00	; 0
 19e:	07 c0       	rjmp	.+14     	; 0x1ae <Custom_characters+0x24>
		LCD_Data(custom_char[i]);
 1a0:	f8 01       	movw	r30, r16
 1a2:	ec 0f       	add	r30, r28
 1a4:	fd 1f       	adc	r31, r29
 1a6:	80 81       	ld	r24, Z
 1a8:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_Data>
void Custom_characters(unsigned char custom_char[]){
	// CGRAM address = (character code x 8) + CGRAM base address
	unsigned char cgram_address = (1 * 8) + 0x40;

	LCD_Cmd(cgram_address); // Set CGRAM address
	for(int i=0; i<8; i++) {
 1ac:	21 96       	adiw	r28, 0x01	; 1
 1ae:	c8 30       	cpi	r28, 0x08	; 8
 1b0:	d1 05       	cpc	r29, r1
 1b2:	b4 f3       	brlt	.-20     	; 0x1a0 <Custom_characters+0x16>
		LCD_Data(custom_char[i]);
	}
	
}
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	1f 91       	pop	r17
 1ba:	0f 91       	pop	r16
 1bc:	08 95       	ret

000001be <main>:
unsigned char custom_char[] = {0x0e,0x0e,0x04,0x04,0x1f,0x04,0x0a,0x0a};

/*Our main program*/
int main(void)
{
	LCD_Init(); /* Initialize LCD */
 1be:	0e 94 97 00 	call	0x12e	; 0x12e <LCD_Init>
	LCD_String("Custom Chars"); /* Write a string on 1st line of LCD*/
 1c2:	88 e6       	ldi	r24, 0x68	; 104
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 af 00 	call	0x15e	; 0x15e <LCD_String>
	LCD_Cmd(0xC0); /* Go to 2nd line*/	
 1ca:	80 ec       	ldi	r24, 0xC0	; 192
 1cc:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Cmd>
	Custom_characters(custom_char);
 1d0:	80 e6       	ldi	r24, 0x60	; 96
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	0e 94 c5 00 	call	0x18a	; 0x18a <Custom_characters>
}
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	08 95       	ret

000001de <_exit>:
 1de:	f8 94       	cli

000001e0 <__stop_program>:
 1e0:	ff cf       	rjmp	.-2      	; 0x1e0 <__stop_program>
